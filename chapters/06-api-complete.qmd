# Building a Complete API Server

## Introduction

In this chapter, we'll enhance our basic API server with features needed for production use:
- Authentication
- WebSocket support for real-time data
- Multiple device management
- Data logging and persistence

## Enhanced Project Structure

First, let's organize our enhanced API server:

```python
from fastapi import FastAPI, WebSocket, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from pydantic import BaseModel
from typing import Dict, List, Optional
import asyncio
import json
import time

app = FastAPI(
    title="Advanced Device Control API",
    description="Production-ready API for device control",
    version="2.0.0"
)
```

## Device Manager

Let's create a class to manage multiple devices:

```python
class DeviceManager:
    def __init__(self):
        """Initialize device manager."""
        self.devices: Dict[str, DeviceInterface] = {}
        
    def add_device(self, device_id: str, port: str) -> bool:
        """Add a new device."""
        if device_id in self.devices:
            return False
            
        device = DeviceInterface(port)
        if device.connect():
            self.devices[device_id] = device
            return True
        return False
        
    def remove_device(self, device_id: str) -> bool:
        """Remove a device."""
        if device_id not in self.devices:
            return False
            
        device = self.devices[device_id]
        device.disconnect()
        del self.devices[device_id]
        return True
        
    def get_device(self, device_id: str) -> Optional[DeviceInterface]:
        """Get device by ID."""
        return self.devices.get(device_id)
        
    def get_all_devices(self) -> List[str]:
        """Get list of all device IDs."""
        return list(self.devices.keys())

# Create device manager instance
device_manager = DeviceManager()
```

## Authentication

Let's implement basic authentication:

```python
from datetime import datetime, timedelta
from jose import JWTError, jwt
from passlib.context import CryptContext

# Security configuration
SECRET_KEY = "your-secret-key"  # In production, use environment variable
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

class User(BaseModel):
    username: str
    disabled: Optional[bool] = None

class UserInDB(User):
    hashed_password: str

# Demo user database - use real database in production
users_db = {
    "admin": {
        "username": "admin",
        "hashed_password": pwd_context.hash("password"),
        "disabled": False
    }
}

def authenticate_user(username: str, password: str):
    """Authenticate user."""
    user = get_user(username)
    if not user or not pwd_context.verify(password, user.hashed_password):
        return False
    return user

def create_access_token(data: dict):
    """Create JWT token."""
    expires = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    data.update({"exp": expires})
    return jwt.encode(data, SECRET_KEY, algorithm=ALGORITHM)

async def get_current_user(token: str = Depends(oauth2_scheme)):
    """Get current user from token."""
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Invalid authentication credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    user = get_user(username)
    if user is None:
        raise credentials_exception
    return user
```

## WebSocket Support

Let's add real-time data streaming:

```python
class ConnectionManager:
    def __init__(self):
        """Initialize connection manager."""
        self.active_connections: Dict[str, List[WebSocket]] = {}
        
    async def connect(self, websocket: WebSocket, device_id: str):
        """Connect websocket client."""
        await websocket.accept()
        if device_id not in self.active_connections:
            self.active_connections[device_id] = []
        self.active_connections[device_id].append(websocket)
        
    def disconnect(self, websocket: WebSocket, device_id: str):
        """Disconnect websocket client."""
        if device_id in self.active_connections:
            self.active_connections[device_id].remove(websocket)
            
    async def broadcast_temperature(self, device_id: str, data: dict):
        """Broadcast temperature data to all connected clients."""
        if device_id in self.active_connections:
            for connection in self.active_connections[device_id]:
                await connection.send_json(data)

manager = ConnectionManager()

@app.websocket("/ws/{device_id}")
async def websocket_endpoint(websocket: WebSocket, device_id: str):
    """WebSocket endpoint for real-time temperature data."""
    await manager.connect(websocket, device_id)
    try:
        while True:
            device = device_manager.get_device(device_id)
            if device:
                temp = device.get_temperature()
                if temp is not None:
                    data = {
                        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                        "temperature": temp
                    }
                    await manager.broadcast_temperature(device_id, data)
            await asyncio.sleep(1)
    except Exception as e:
        print(f"WebSocket error: {e}")
    finally:
        manager.disconnect(websocket, device_id)
```

## Enhanced API Routes

Let's update our routes with authentication and multiple device support:

```python
@app.post("/device/{device_id}")
async def add_device(
    device_id: str, 
    port: str, 
    current_user: User = Depends(get_current_user)
):
    """Add a new device."""
    if device_manager.add_device(device_id, port):
        return {"message": f"Device {device_id} added successfully"}
    raise HTTPException(
        status_code=400,
        detail="Failed to add device"
    )

@app.get("/devices")
async def list_devices(current_user: User = Depends(get_current_user)):
    """List all devices."""
    return {"devices": device_manager.get_all_devices()}

@app.get("/device/{device_id}/temperature")
async def get_device_temperature(
    device_id: str,
    current_user: User = Depends(get_current_user)
):
    """Get temperature from specific device."""
    device = device_manager.get_device(device_id)
    if not device:
        raise HTTPException(
            status_code=404,
            detail="Device not found"
        )
        
    temp = device.get_temperature()
    if temp is None:
        raise HTTPException(
            status_code=500,
            detail="Failed to read temperature"
        )
        
    return {
        "device_id": device_id,
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        "temperature": temp
    }
```

## Data Logging

Let's add data logging functionality:

```python
import sqlite3
from datetime import datetime

class DataLogger:
    def __init__(self, db_path="device_data.db"):
        """Initialize data logger."""
        self.db_path = db_path
        self.init_db()
        
    def init_db(self):
        """Initialize database."""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS temperature_logs
            (device_id TEXT, timestamp TEXT, temperature REAL)
        ''')
        conn.commit()
        conn.close()
        
    def log_temperature(self, device_id: str, temperature: float):
        """Log temperature reading."""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        timestamp = datetime.now().isoformat()
        c.execute(
            "INSERT INTO temperature_logs VALUES (?, ?, ?)",
            (device_id, timestamp, temperature)
        )
        conn.commit()
        conn.close()
        
    def get_device_history(
        self, 
        device_id: str, 
        limit: int = 100
    ) -> List[dict]:
        """Get temperature history for device."""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        c.execute(
            """
            SELECT * FROM temperature_logs 
            WHERE device_id = ? 
            ORDER BY timestamp DESC 
            LIMIT ?
            """,
            (device_id, limit)
        )
        rows = c.fetchall()
        conn.close()
        
        return [
            {
                "device_id": row[0],
                "timestamp": row[1],
                "temperature": row[2]
            }
            for row in rows
        ]

# Create data logger instance
data_logger = DataLogger()
```

## Using the Enhanced API

Here's how to use the enhanced API:

```python
# Example client code
import requests
import websockets
import asyncio
import json

# Get access token
response = requests.post(
    "http://localhost:8000/token",
    data={"username": "admin", "password": "password"}
)
token = response.json()["access_token"]

# Add device
headers = {"Authorization": f"Bearer {token}"}
response = requests.post(
    "http://localhost:8000/device/dev1",
    headers=headers,
    params={"port": "/dev/ttyUSB0"}
)

# WebSocket client for real-time data
async def temperature_monitor():
    uri = "ws://localhost:8000/ws/dev1"
    async with websockets.connect(uri) as websocket:
        while True:
            data = await websocket.recv()
            print(f"Temperature: {json.loads(data)}")

# Run WebSocket client
asyncio.get_event_loop().run_until_complete(temperature_monitor())
```

## Benefits of Enhanced API

1. **Security**:
   - Authentication
   - Token-based access
   - Protected endpoints

2. **Real-time Data**:
   - WebSocket support
   - Efficient data streaming
   - Multiple client support

3. **Scalability**:
   - Multiple device management
   - Data persistence
   - Connection management

## Practice Exercises

1. **Basic**: Add user management endpoints
2. **Intermediate**: Implement device configuration persistence
3. **Advanced**: Add data export functionality

## What's Next

You've now built a complete, production-ready API server. Next steps might include:
- Adding more security features
- Implementing device discovery
- Creating a web interface
- Adding data analysis features

## References

For more information on FastAPI features, see @fastapi_docs.