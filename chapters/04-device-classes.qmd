# Device Communication with Classes

## Introduction

In the previous chapter, we used functions to communicate with our mock device. Now, we'll reorganize this functionality into a class-based structure. This will help us:
- Maintain device state
- Organize related commands
- Handle errors consistently
- Create a cleaner interface

## Basic Device Interface

Let's start by creating our device interface class:

```python
import time
import random
from datetime import datetime

class DeviceInterface:
    """Interface for communicating with scientific instruments."""
    
    def __init__(self, port='/dev/ttyUSB0', baudrate=9600):
        """Initialize device interface."""
        self.port = port
        self.baudrate = baudrate
        self.device = None
        self.connected = False
        
    def connect(self):
        """Establish connection with the device."""
        try:
            self.device = MockSerial()
            self.device.open()
            self.connected = True
            print(f"Connected to device on {self.port}")
            return True
        except Exception as e:
            print(f"Connection failed: {e}")
            self.connected = False
            return False
            
    def disconnect(self):
        """Close device connection."""
        if self.connected:
            try:
                self.device.close()
                self.connected = False
                print("Disconnected from device")
                return True
            except Exception as e:
                print(f"Error disconnecting: {e}")
                return False
        return True
```

## Command Methods

Now let's add methods for sending commands:

```python
    def send_command(self, command):
        """Send a command to the device."""
        if not self.connected:
            print("Error: Device not connected")
            return None
            
        try:
            self.device.write(command.encode('utf-8'))
            response = self.device.readline()
            return response.decode('utf-8').strip()
        except Exception as e:
            print(f"Command error: {e}")
            return None
            
    def get_temperature(self):
        """Get current temperature reading."""
        response = self.send_command("TEMP?")
        if response and not response.startswith("ERROR"):
            try:
                return float(response)
            except ValueError:
                print("Error: Invalid temperature format")
                return None
        return None
        
    def set_temperature(self, temperature):
        """Set target temperature."""
        response = self.send_command(f"TEMP:{temperature}")
        return response == "OK"
        
    def get_device_id(self):
        """Get device identifier."""
        return self.send_command("ID?")
```

## Adding Monitoring Features

Let's add methods for continuous monitoring:

```python
    def monitor_temperature(self, duration_seconds=10, interval=1):
        """Monitor temperature for a specified duration."""
        if not self.connected:
            print("Error: Device not connected")
            return None
            
        readings = []
        start_time = time.time()
        
        try:
            while time.time() - start_time < duration_seconds:
                temp = self.get_temperature()
                if temp is not None:
                    timestamp = datetime.now()
                    readings.append((timestamp, temp))
                time.sleep(interval)
        except KeyboardInterrupt:
            print("\nMonitoring stopped by user")
        except Exception as e:
            print(f"Monitoring error: {e}")
            
        return readings
        
    def check_temperature_stability(self, num_readings=5, interval=1):
        """Check if temperature is stable."""
        readings = []
        for _ in range(num_readings):
            temp = self.get_temperature()
            if temp is not None:
                readings.append(temp)
            time.sleep(interval)
            
        if not readings:
            return False
            
        # Calculate standard deviation
        mean = sum(readings) / len(readings)
        variance = sum((x - mean) ** 2 for x in readings) / len(readings)
        std_dev = variance ** 0.5
        
        # Consider stable if standard deviation is less than 0.5 degrees
        return std_dev < 0.5
```

## Data Logging

Let's add methods for logging data:

```python
    def start_logging(self, filepath, interval=1):
        """Log temperature readings to a file."""
        print(f"Starting temperature logging to {filepath}")
        
        try:
            with open(filepath, 'w') as f:
                f.write("timestamp,temperature\n")
                
                while True:
                    temp = self.get_temperature()
                    if temp is not None:
                        timestamp = datetime.now()
                        f.write(f"{timestamp},{temp}\n")
                        f.flush()  # Ensure data is written immediately
                    time.sleep(interval)
                    
        except KeyboardInterrupt:
            print("\nLogging stopped by user")
        except Exception as e:
            print(f"Logging error: {e}")
```

## Using the Device Interface

Here's how to use our device interface:

```python
# Create device interface
device = DeviceInterface('/dev/ttyUSB0')

# Connect to device
if device.connect():
    try:
        # Get device info
        device_id = device.get_device_id()
        print(f"Connected to device: {device_id}")
        
        # Monitor temperature
        print("\nMonitoring temperature...")
        readings = device.monitor_temperature(duration_seconds=5)
        
        if readings:
            print("\nTemperature Readings:")
            for timestamp, temp in readings:
                print(f"Time: {timestamp}, Temperature: {temp:.1f}Â°C")
                
        # Check stability
        if device.check_temperature_stability():
            print("\nTemperature is stable")
        else:
            print("\nTemperature is not stable")
            
    finally:
        device.disconnect()
```

## Benefits of Class-Based Approach

1. **State Management**: 
   - Connection state is tracked automatically
   - Device settings are maintained
   - Easier to handle device configuration

2. **Organized Interface**:
   - Related methods are grouped together
   - Consistent error handling
   - Cleaner command structure

3. **Extended Functionality**:
   - Easy to add new features
   - Can add property decorators for device settings
   - Better support for complex operations

## Comparing Approaches

Let's compare the functional and class-based approaches:

| Feature | Functional | Class-Based |
|---------|------------|-------------|
| State Management | Manual | Automatic |
| Error Handling | Per-function | Centralized |
| Code Organization | Separate functions | Grouped methods |
| Device Settings | Passed as parameters | Stored in instance |
| Extensibility | New functions | New methods and properties |

## Practice Exercises

1. **Basic**: Add a method to calculate average temperature over time
2. **Intermediate**: Implement a method for temperature ramping
3. **Advanced**: Create a method for automated calibration

## What's Next

In the next chapters, we'll build an API server that uses this device interface to provide network access to our instruments.

## References

For more information on object-oriented programming with hardware devices, see @python_cookbook.