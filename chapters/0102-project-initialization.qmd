# Project Initialization Guide

We will be using boilerplate that includes modern dependency management with uv, comprehensive testing setup with pytest, documentation with MkDocs, code quality tools, CI/CD with GitHub Actions, Docker support, and dev container configuration for VSCode. This will give you a solid foundation for professional Python development without having to set up each component manually.

## Understanding Project Structure

Before we dive into creating a new project, it's important to understand what makes up a well-structured Python project:

- Source code directory (your main package)
- Tests directory
- Documentation
- Build configuration files
- Development tools configuration
- CI/CD configuration
- License and README files

## Using Cookiecutter

### What is Cookiecutter?

Cookiecutter is a project template tool that we'll use through `uvx` to create our project structure. It uses a templating engine to replace project variables with your custom values, ensuring consistent project structure across all your repositories.

### Project Template Selection

We'll use the [`cookiecutter-uv`](https://github.com/fpgmaas/cookiecutter-uv) template created by [Florian Maas](https://github.com/fpgmaas), which is specifically designed for modern Python projects using `uv`. This well-maintained template includes:

- Modern dependency management with uv
- Comprehensive testing setup with pytest
- Documentation with MkDocs
- Code quality tools (ruff, mypy)
- CI/CD with GitHub Actions
- Docker support
- Dev container configuration for VSCode

### Project Initialization Workflow

Here's a high-level overview of the project initialization workflow:
The green boxes represent automated steps, while the red boxes represent manual steps.

```{mermaid}
graph TB
    Init[Project Initialization] --> Cookie[Run Cookiecutter]
    Cookie --> Setup[Setup Project Structure]
    Setup --> Git[Initialize Git]
    Git --> Install[make install]
    
    Install --> DevLoop[Development Loop]
    
    subgraph DevLoop[Development Loop]
        direction TB
        WriteTest[Write Test] --> Test1[make test]
        Test1 --> Code[Write/Edit Code]
        Code --> Test2[make test]
        
        Test2 -->|Fail| Code
        Test2 -->|Pass| Check[make check]
        
        Check --> Docs[make docs]
        Docs --> CommitGroup
        
        subgraph CommitGroup[Git Commit Process]
            direction LR
            Commit[Git Commit]
            PreCommit[Pre-commit Hooks:<br/>- Check Conflicts<br/>- Ruff Format<br/>- Ruff Lint<br/>- Prettier]
        end
        
        CommitGroup --> CI[GitHub Actions CI]
        CI --> Deploy[make publish]
    end
    
    %% Manual steps
    classDef manual fill:#f9d6d6,stroke:#d64545
    class Code,Commit,Init,Cookie,WriteTest,Git manual
    
    %% Automated steps
    classDef automated fill:#d4edda,stroke:#28a745
    class Install,Check,Test1,Test2,Docs,Deploy,CI,PreCommit automated
    
    %% Subgraphs
    classDef process fill:#e6f3ff,stroke:#0056b3
    class CommitGroup process
    
    %% Container
    style DevLoop fill:#f0f0f0,stroke:#333,stroke-width:2px
```

### Creating Your Project

Run the template generator:

```bash
uvx cookiecutter https://github.com/fpgmaas/cookiecutter-uv.git
```

Once you run the command, you will be prompted to enter some information about your project. This information will be used to generate the project structure and files.

```bash
Installed 22 packages in 11ms
  [1/14] author (Florian Maas): Ameyanagi
  [2/14] email (fpgmaas@gmail.com): contact@ameyanagi.com
  [3/14] author_github_handle (fpgmaas): Ameyanagi
  [4/14] project_name (example-project): StructuredPy-code
  [5/14] project_slug (structuredpy_code):
  [6/14] project_description (This is a template repository for Python projects that use uv for their dependency management.): This is a repository containing the example project used in the StructuredPy
  [7/14] Select include_github_actions
    1 - y
    2 - n
    Choose from [1/2] (1):
  [8/14] Select publish_to_pypi
    1 - y
    2 - n
    Choose from [1/2] (1):
  [9/14] Select deptry
    1 - y
    2 - n
    Choose from [1/2] (1):
  [10/14] Select mkdocs
    1 - y
    2 - n
    Choose from [1/2] (1):
  [11/14] Select codecov
    1 - y
    2 - n
    Choose from [1/2] (1):
  [12/14] Select dockerfile
    1 - y
    2 - n
    Choose from [1/2] (1):
  [13/14] Select devcontainer
    1 - y
    2 - n
    Choose from [1/2] (1):
  [14/14] Select open_source_license
    1 - MIT license
    2 - BSD license
    3 - ISC license
    4 - Apache Software License 2.0
    5 - GNU General Public License v3
    6 - Not open source
    Choose from [1/2/3/4/5/6] (1):
```

### Project directory

You can check the initial directory tree by running the following command:

```bash
tree -a -L 4 StructuredPy-code # Please change the directory name to your project name or a directory name you specified in the cookiecutter command
```

The output will be like this:

```bash
StructuredPy-code
â”œâ”€â”€ codecov.yaml
â”œâ”€â”€ CONTRIBUTING.md
â”œâ”€â”€ .devcontainer
â”‚Â Â  â”œâ”€â”€ devcontainer.json
â”‚Â Â  â””â”€â”€ postCreateCommand.sh
â”œâ”€â”€ Dockerfile
â”œâ”€â”€ docs
â”‚Â Â  â”œâ”€â”€ index.md
â”‚Â Â  â””â”€â”€ modules.md
â”œâ”€â”€ .editorconfig
â”œâ”€â”€ .github
â”‚Â Â  â”œâ”€â”€ actions
â”‚Â Â  â”‚Â Â  â””â”€â”€ setup-python-env
â”‚Â Â  â”‚Â Â      â””â”€â”€ action.yml
â”‚Â Â  â””â”€â”€ workflows
â”‚Â Â      â”œâ”€â”€ main.yml
â”‚Â Â      â”œâ”€â”€ on-release-main.yml
â”‚Â Â      â””â”€â”€ validate-codecov-config.yml
â”œâ”€â”€ .gitignore
â”œâ”€â”€ LICENSE
â”œâ”€â”€ Makefile
â”œâ”€â”€ mkdocs.yml
â”œâ”€â”€ .pre-commit-config.yaml
â”œâ”€â”€ pyproject.toml
â”œâ”€â”€ README.md
â”œâ”€â”€ structuredpy_code
â”‚Â Â  â”œâ”€â”€ foo.py
â”‚Â Â  â””â”€â”€ __init__.py
â”œâ”€â”€ tests
â”‚Â Â  â””â”€â”€ test_foo.py
â””â”€â”€ tox.ini

9 directories, 23 files
```

### Initializing git repository

```bash
git init
git add .
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Ameyanagi/StructuredPy-code.git
git push -u origin main
```

### Installing the python dependencies

```bash
make install
```

This will run the following command:

```bash
uv sync
uv run pre-commit install
```

The output will be like this:

```bash
ðŸš€ Creating virtual environment using uv
Using CPython 3.13.1 interpreter at: /usr/bin/python3
Creating virtual environment at: .venv
Resolved 63 packages in 620ms
   Built structuredpy-code @ file:///home/ameyanagi/StructuredPy-code
Prepared 59 packages in 1.12s
Installed 59 packages in 169ms
 + babel==2.16.0
 + cachetools==5.5.0
 + certifi==2024.12.14
 + cfgv==3.4.0
 + chardet==5.2.0
 + charset-normalizer==3.4.1
 + click==8.1.8
 + colorama==0.4.6
 + coverage==7.6.10
 + deptry==0.21.2
 + distlib==0.3.9
 + filelock==3.16.1
 + ghp-import==2.1.0
 + griffe==1.5.4
 + identify==2.6.5
 + idna==3.10
 + iniconfig==2.0.0
 + jinja2==3.1.5
 + markdown==3.7
 + markupsafe==3.0.2
 + mergedeep==1.3.4
 + mkdocs==1.6.1
 + mkdocs-autorefs==1.2.0
 + mkdocs-get-deps==0.2.0
 + mkdocs-material==9.5.49
 + mkdocs-material-extensions==1.3.1
 + mkdocstrings==0.27.0
 + mkdocstrings-python==1.13.0
 + mypy==1.14.1
 + mypy-extensions==1.0.0
 + nodeenv==1.9.1
 + packaging==24.2
 + paginate==0.5.7
 + pathspec==0.12.1
 + platformdirs==4.3.6
 + pluggy==1.5.0
 + pre-commit==4.0.1
 + pygments==2.19.1
 + pymdown-extensions==10.13
 + pyproject-api==1.8.0
 + pytest==8.3.4
 + pytest-cov==6.0.0
 + python-dateutil==2.9.0.post0
 + pyyaml==6.0.2
 + pyyaml-env-tag==0.1
 + regex==2024.11.6
 + requests==2.32.3
 + requirements-parser==0.11.0
 + ruff==0.8.6
 + six==1.17.0
 + structuredpy-code==0.0.1 (from file:///home/ameyanagi/StructuredPy-code)
 + tox==4.23.2
 + tox-uv==1.17.0
 + types-setuptools==75.6.0.20241223
 + typing-extensions==4.12.2
 + urllib3==2.3.0
 + uv==0.5.15
 + virtualenv==20.28.1
 + watchdog==6.0.0
pre-commit installed at .git/hooks/pre-commit
```

## Summary

In this chapter, you learned how to initialize a new Python project using the `cookiecutter-uv` template. This template provides a modern Python project structure with uv, pytest, MkDocs, and other tools to help you get started quickly.

In the next chapter, we'll explore how to write and run tests for your Python project using the project structure we just created.
